buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:6.1.6'
    }
}

// 3rd party plugin repositories can be configured in settings.gradle
plugins {
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.sonarqube" version "3.1.1"
    id 'jacoco'
    id 'com.github.rewolf.gradle.moarjavadoc' version "1.0.0"
    id 'pl.allegro.tech.build.axion-release' version '1.13.2'
}


scmVersion {


}


// Apply the java plugin to add support for Java
apply plugin: 'org.owasp.dependencycheck'


allprojects {
    apply plugin: 'java'
    apply plugin: "jacoco"


    group = 'org.anasoid.jmc'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    project.version = scmVersion.version

    repositories {
        jcenter()
        mavenCentral()
    }

    jacoco {
        toolVersion = '0.8.5'
    }


    ext.gradleScriptDir = "${rootProject.projectDir}/gradle"
    apply from: "${gradleScriptDir}/ide.gradle"


}


subprojects {

    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'maven-publish'
    apply plugin: "jacoco"
    apply plugin: 'com.github.rewolf.gradle.moarjavadoc'
    apply plugin: 'signing'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

            }
        }
    }
    System.setProperty("org.checkstyle.google.suppressionfilter.config", rootProject.projectDir.toString() + "/config/checkstyle/checkstyle-suppressions.xml")
    checkstyle {

        configFile = rootProject.file('config/checkstyle/google_checks.xml')
        toolVersion "8.40"
        ignoreFailures = false
        maxErrors = 0
        maxWarnings = 0

    }
    pmd {
        toolVersion = "6.31.0"
        consoleOutput = true
        sourceSets = [sourceSets.main]
        ruleSetFiles = files("${rootProject.projectDir}/config/pmd/pmd.xml")
        ruleSets = []
    }

    jacocoTestReport {

        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
        onlyIf = {
            true
        }

    }
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }
    }


    dependencies {

        // SLF4J as a facade over Log4j2 required dependencies
        implementation("org.apache.logging.log4j:log4j-api:$log4j2Version")
        implementation("org.apache.logging.log4j:log4j-core:$log4j2Version")
        implementation("org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version")
        // Bridges from other logging implementations to SLF4J. Be careful not to bridge SLF4J itself to
        implementation("org.slf4j:jul-to-slf4j:$slf4jVersion")
        implementation("org.slf4j:jcl-over-slf4j:$slf4jVersion")
        implementation("org.slf4j:log4j-over-slf4j:$slf4jVersion")


        //JMETER
        implementation("org.apache.jmeter:ApacheJMeter_java:$jmeterVersion") {
            exclude group: 'org.apache.jmeter', module: 'bom'
        }
        implementation("org.apache.jmeter:ApacheJMeter_http:$jmeterVersion") {
            exclude group: 'org.apache.jmeter', module: 'bom'
        }

        implementation("com.thoughtworks.xstream:xstream:1.4.15")

        //LOMBOCK
        compileOnly 'org.projectlombok:lombok:1.18.16'
        annotationProcessor 'org.projectlombok:lombok:1.18.16'

        testCompileOnly 'org.projectlombok:lombok:1.18.16'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'


        //Apache common

        implementation("org.apache.commons:commons-lang3:$commonsLangVersion")
        implementation("commons-io:commons-io:$commonsIoVersion")


        //Test
        testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")
        testImplementation("commons-io:commons-io:$commonsIoVersion")
        testImplementation("org.assertj:assertj-core:$assertjCore")

        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")

        testImplementation("org.xmlunit:xmlunit-core:$xmlunitVersion")
        testImplementation("org.xmlunit:xmlunit-matchers:$xmlunitVersion")
        testImplementation("com.github.tomakehurst:wiremock:$wiremockVersion")
        testImplementation("ru.lanwen.wiremock:wiremock-junit5:$wiremockJunit5Version")

    }


}


task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}
test {
    finalizedBy codeCoverageReport // report is always generated after tests run
}
// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    }
}
ext {
    linkHomepage = 'https://github.com/anasoid/jmeter-as-code'
    linkIssue = 'https://github.com/anasoid/jmeter-as-code/issues'
    linkScmUrl = 'https://github.com/anasoid/jmeter-as-code'


}







